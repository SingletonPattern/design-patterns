#### 模式定义
定义一个创建产品对象的工厂接口，将产品对象的实际工作推迟到具体子工厂类当中。  
这满足创建型模式中所要求的==创建于使用相分离==的特点
#### 工厂模式特点
用户只需要知道具体工厂的名称就可得到索要产品，无需知道产品的具体创建过程；
在系统增加新的产品时只需要添加具体产品类和对应的具体工厂类，无需对原工厂进行任何修改，满足开闭原则；
- 缺点：每增加一个产品就要增加一个具体产品类和一个对应的具体工厂类，这增加了系统的复杂度；
#### 模式的结构和实现
工厂方法模式由抽象工厂、具体工厂、抽象产品和具体产品等4个要素构成   
1. 抽象工厂（Abstract Factory）：提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法 newProduct() 来创建产品。
2. 具体工厂（ConcreteFactory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建。
3. 抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能。
4. 具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间一一对应。


#### 抽象工厂定义
抽象工厂是一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无需指定所要产品的具体类就能得到同族的不同等级的产品的模式结构 
抽象工厂模式是工厂方法模式的升级版本，工厂方法模式只生产一个等级的产品，而抽象工厂模式可生产多个等级的产品。  
1. 使用工厂模式条件：   
系统中有多个产品组，每个具体工厂创建同一组但属于不同等级的结构产品。  
系统一次只可能消费其中某一组产品，即同组的产品一起使用。    
2. 抽象工厂模式有点：   
可以在类的内部对产品组中相关连的多等级产品共同管理，而不必专门引入多个新的类来进行管理 
当增加一个新的产品组时不需要修改原代码，满足开闭原则
抽象工厂模式缺点：
当产品组中需要添加一个新的产品时，所有的工厂类都需要进行修改

#### 抽象工厂模式结构
抽象工厂：提高了创建产品的接口，它包含多个创建产品的方法，可以创建多个不同等级的产品。  
具体工厂：主要是实现抽象工厂中的多个抽象方法，完成具体产品的创建。   
抽象产品：定义了产品的规范，描述了产品的主要特性和功能，抽象工厂模式有多个抽象产品。   
具体产品：实现了抽象产品角色所定义的接口，由具体工厂来创建，它 同具体工厂之间是多对一的关系。    
4个要素组成，但抽象工厂中方法个数不同，抽象产品的个数也不同；    

